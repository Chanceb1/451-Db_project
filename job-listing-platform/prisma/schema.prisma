// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(JOB_SEEKER)
  createdAt DateTime @default(now()) @map("created_at")
  lastLogin DateTime @updatedAt @map("last_login")
  isActive  Boolean  @default(true) @map("is_active")

  // Relations
  jobSeeker    JobSeeker?
  employer     Employer?
  admin        Admin?
  notifications Notification[]

  @@map("users")
}

enum Role {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

model JobSeeker {
  id           String   @id @default(cuid())
  userId       String   @unique @map("user_id")
  fullName     String   @map("full_name")
  phone        String?
  location     String?
  notifyMatches Boolean  @default(true) @map("notify_matches")
  notifyUpdates Boolean  @default(true) @map("notify_updates")
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
  savedJobs    SavedJob[]
  reviews      Review[]

  @@map("job_seekers")
}

model Employer {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  companyName   String   @map("company_name")
  industry      String?
  description   String?
  website       String?
  location      String?
  isApproved    Boolean  @default(false) @map("is_approved")
  approvalDate  DateTime? @map("approval_date")
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobListings   JobListing[]
  reviews       Review[]

  @@map("employers")
}

model Admin {
  id           String   @id @default(cuid())
  userId       String   @unique @map("user_id")
  department   String?
  accessLevel  String   @map("access_level")
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics    Analytics[]

  @@map("admins")
}

model JobListing {
  id          String   @id @default(cuid())
  employerId  String   @map("employer_id")
  title       String
  description String
  location    String
  salaryRange String?  @map("salary_range")
  jobType     JobType  @default(FULL_TIME) @map("job_type")
  postedDate  DateTime @default(now()) @map("posted_date")
  deadline    DateTime
  status      ListingStatus @default(ACTIVE)
  isActive    Boolean  @default(true) @map("is_active")
  
  // Relations
  employer    Employer @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications Application[]
  savedJobs   SavedJob[]

  @@map("job_listings")
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  REMOTE
}

enum ListingStatus {
  DRAFT
  ACTIVE
  EXPIRED
  FILLED
  CLOSED
}

model Application {
  id            String   @id @default(cuid())
  listingId     String   @map("listing_id")
  seekerId      String   @map("seeker_id")
  resumeVersion String?  @map("resume_version")
  coverLetter   String?  @map("cover_letter")
  status        ApplicationStatus @default(PENDING)
  appliedDate   DateTime @default(now()) @map("applied_date")
  lastUpdated   DateTime @updatedAt @map("last_updated")
  
  // Relations
  jobListing    JobListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  jobSeeker     JobSeeker  @relation(fields: [seekerId], references: [id], onDelete: Cascade)

  @@map("applications")
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  INTERVIEW
  REJECTED
  ACCEPTED
}

model SavedJob {
  id        String   @id @default(cuid())
  seekerId  String   @map("seeker_id")
  listingId String   @map("listing_id")
  savedDate DateTime @default(now()) @map("saved_date")
  
  // Relations
  jobSeeker  JobSeeker  @relation(fields: [seekerId], references: [id], onDelete: Cascade)
  jobListing JobListing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([seekerId, listingId])
  @@map("saved_jobs")
}

model Review {
  id         String   @id @default(cuid())
  seekerId   String   @map("seeker_id")
  employerId String   @map("employer_id")
  rating     Int
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")
  isApproved Boolean  @default(false) @map("is_approved")
  
  // Relations
  jobSeeker  JobSeeker @relation(fields: [seekerId], references: [id], onDelete: Cascade)
  employer   Employer  @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Analytics {
  id          String   @id @default(cuid())
  adminId     String   @map("admin_id")
  reportType  String   @map("report_type")
  metrics     Json
  generatedAt DateTime @default(now()) @map("generated_at")
  
  // Relations
  admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

